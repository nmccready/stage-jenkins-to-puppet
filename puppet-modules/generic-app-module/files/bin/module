#!/bin/sh
#
# REPLACE_CAPS_MODULE_NAME Startup script for REPLACE_CAPS_MODULE_NAME
#
# chkconfig: - 85 15
# description: REPLACE_CAPS_MODULE_NAME
# processname: java

# ############# BEGIN COPY FROM SNIPPETS SERVICE LOGGING
# Source functions library.
. /etc/init.d/functions
# ############# BEGIN NOT NEEDED IN PRODUCTION
# override functions library for cleaner output (DEBUG ONLY)
logTo="$OPTDIR/$APP/$APP".log
echo Logging will be at "$logTo"
. /etc/init.d/override_functions  "$logTo"
# ############## END  NOT NEEDED IN PRODUCTION
OPTDIR="/opt"
APP="REPLACE_MODULE_NAME"
APPDIR="$OPTDIR"/"$APP"
USER="REPLACE_USER_NAME"

PROC="java"
PROG="$APP"
PID_PATH="/opt/$APP/RUNNING_PID"
INIT_D="/etc/init.d/$APP"
SERVICE_CMD="service $APP"
pidCMD="pgrep -u $USER $PROC"

#echo "pidLookUp  cmd is:" "$pidCMD"
#use eval to evaluate pipes as variables see url below
#http://stackoverflow.com/questions/11596606/executing-a-variable-with-a-pipe-in-shell
PID=`eval $pidCMD`
NOW=`date +"%m-%d-%Y-%H-%M-%S"`
# ############# END COPY FROM SNIPPETS SERVICE LOGGING

STAGETIME=`stat -c %Y /opt/stage/$APP/lib/REPLACE_BASIC_NAME*`
APPTIME=`stat -c %Y /opt/$APP/lib/REPLACE_BASIC_NAME*`
STAGEDIR="/opt/stage/$APP"
ROLLBACKDIR="$APP.rollback"


fail_if_proc_is_running(){
        if [ ! -z "$PID" ];  then
          failure
          echo
          RUNNING_PID=$PID
          echo "Warning: Process is already running, pid: $RUNNING_PID"
          exit 0;
        fi
}

fail_if_proc_is_not_running(){
        if [ -z  "$PID" ];  then
          failure
          echo
          echo "Warning:  Process was not running!"
          RET=0
        else
          RET=1
        fi
        return $RET
}

check_existing_back_up(){
        echo "Checking for existing rollback directory..."
        if [ -d "$APPDIR"'.rollback' ]; then
                cd $OPTDIR
                echo
                echo "Existing Rollback exists!!!"
                echo
                echo "Please wait.....Archiving rollback directory..."
                mv "$ROLLBACKDIR" "$ROLLBACKDIR.$NOW"  && success || failure
                echo
                echo "Archving rollback directory was SUCCESSFUL, "$ROLLBACKDIR has been moved to "$ROLLBACKDIR.$NOW..."
                RETVAL=$?
        fi
}
startstatus()
{
        echo -n "Starting $PROG: "
        fail_if_proc_is_running
        cd $APPDIR
        daemon --user=$USER --pidfile=$PID_PATH "./start REPLACE_JAVA_ARGS > /dev/null 2>&1 &"
        echo
        echo -n "Please wait 2 seconds.....  "
        sleep 2
        echo -n "$PROG status: "
        if [ -f "$PID_PATH" ];  then
          success
          RETVAL=0
        else
          failure
          RETVAL=1
        fi
}
start(){
        deploy
        startstatus
        if [ "$RETVAL" == 0 ];  then
          echo "Successful start"
          success
          RETVAL=0
        else
        rollback
        echo
        echo
	startstatus
        echo
        fi
        echo
	return $RETVAL
}
stop()
{
        echo -n "Stopping "$PROG": "
        fail_if_proc_is_not_running
        if [ -n "$PID" ];  then
            kill $PID  && success || failure
            echo
            RETVAL=$?
        fi
        #rm -f $PID_PATH not needed on normal stop scala/java code should remove pid on graceful shutdown
        echo
        return $RETVAL
}

halt()
{
        echo -n "Killing $PROG: "
        fail_if_proc_is_not_running
        if [ -n "$PID" ];  then
          kill -9 $PID && success || failure
          echo
        RETVAL=$?
        fi
        rm -f $PID_PATH #dirty shudown removal required
        echo
        return $RETVAL
}

status()
{
        if [ -n "$PID" ];  then
          echo " $PROG  is running," 
        RUNNING_PID=$PID  
        echo "pid: $RUNNING_PID"
          echo 
        else
          echo " $PROG is not running"
        fi
}

deploy(){

        if [[ -d "$APPDIR"  && ! -d "$APPDIR/lib" ]]  ; then
                echo "Program is not installed..."
                echo
                echo "Please wait Intial installation in progress"
                echo
                cd $OPTDIR
                rm -rf $APPDIR
                rsync -az "$STAGEDIR/" "$APPDIR/" && success || failure
                echo 
                echo "Installation complete!!!"
                echo "Please wait... Attempting to start $PROG for the first time!!!"
                echo
                RETVAL=$?
                return $RETVAL
       elif [ "$STAGETIME" -gt "$APPTIME" ]; then
                echo "Please wait...Checking for new version of $PROG in Stage..."
                echo "Found new verson of $PROG in Stage..."
                echo "Starting migration Please wait..."
                echo
                cd $OPTDIR
                check_existing_back_up
                echo 
                echo "Moving $APP to $ROLLBACKDIR"
                mv $APPDIR $APPDIR'.rollback'
                echo 
                echo "Please wait...Copying New version of $PROG from STAGE..."
                rsync -az "$STAGEDIR/" "$APPDIR/" && success || failure
                echo 
                RETVAL=$?
                echo "Completed copying New version of $PROG directory..."
                echo "Please wait... Attempting to start new version of $PROG"
        else
                echo
                echo "No new version of $PROG found in Stage...Proceeding to start $PROG"
                echo
                RETVAL=$?
                return $RETVAL
        fi
}
rollback() {
                echo "$PROG failed to start after deployment..."
                echo "Please wait... Attempting to revert $PROG to previous state..."
        if [ -d "$OPTDIR/$ROLLBACKDIR" ] ; then
                cd $OPTDIR
                echo
                echo "Reverting $PROG to previous state from Rollback directory..."
                mv "$APP" "$APP.BAD.$NOW"
                cp -r "$ROLLBACKDIR/" "$APP" 
                echo
                echo "Please wait!!! Completing Rollback..."
                rm -rf $ROLLBACKDIR && success || failure
                echo
        	    #inset wget commands here and
        	    echo ""$PROG" on (`uname -n`) failed deployment. Rollback was completed  @ "$NOW"" | mail -s "$PROG (`uname -n`) deployment failed" -c REPLACE_WITH_SPACED_EMAILS
	            echo "Completed Reverting $PROG to previous state...Successful "
                RETVAL=$?
                echo
                return $RETVAL
        fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    halt)
        halt
        ;;
    status)
        status
        ;;
    restart)
        /etc/init.d/REPLACE_MODULE_NAME stop
        echo "Please wait, restarting"
        sleep 12
        echo
        /etc/init.d/REPLACE_MODULE_NAME start
        ;;
    deploy)
        deploy
        ;; 
    rollback)
        rollback
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|halt|status|deploy|rollback}"
        RETVAL=1
esac
exit $RETVAL

